// Generated by CoffeeScript 1.3.3
(function() {
  var Game, MAXHEIGHT, MAXWIDTH, Rock, Shape, SpaceShip, g,
    _this = this;

  MAXWIDTH = 1024;

  MAXHEIGHT = 768;

  Game = (function() {

    function Game() {
      var r;
      this.canvas = $('#asteroids_canvas');
      this.ctx = this.canvas[0].getContext('2d');
      this.width = this.canvas.attr('width');
      this.height = this.canvas.attr('height');
      this.player = new SpaceShip(this.width / 2, this.height / 2, 0, this.ctx);
      this.rocks = [new Rock(3 * this.width / 4, 3 * this.height / 4, 2, this.ctx), new Rock(this.width / 4, this.height / 4, 2, this.ctx)];
      this.projectiles = [];
      this.bodies = (function() {
        var _i, _len, _ref, _results;
        _ref = this.rocks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r);
        }
        return _results;
      }).call(this);
      this.bodies = this.bodies.concat([this.player]);
    }

    Game.prototype.shoot = function() {
      return console.log("kapow");
    };

    Game.prototype.bindKeyboard = function(selector) {
      var _this = this;
      return $(selector).keypress(function(e) {
        var angle, angle2, speed, speed2;
        angle = 0.2;
        speed = 1;
        speed2 = -0.5;
        angle2 = -0.5;
        switch (e.which) {
          case 119:
            _this.player.accelerate(speed);
            break;
          case 97:
            _this.player.rotate(-angle);
            break;
          case 115:
            _this.player.accelerate(-speed / 2);
            break;
          case 100:
            _this.player.rotate(angle);
            break;
          case 32:
            _this.shoot();
            break;
          case 101:
            _this.player.strafe(speed2, -angle2);
            break;
          case 113:
            _this.player.strafe(speed2, angle2);
        }
        return e.preventDefault();
      });
    };

    Game.prototype.update = function() {
      var b, _i, _len, _ref;
      this.clear();
      _ref = this.bodies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.tick();
      }
      this.collide();
      return true;
    };

    Game.prototype.collide = function() {};

    Game.prototype.clear = function() {
      this.ctx.fillStyle = 'black';
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    return Game;

  })();

  Shape = (function() {

    function Shape(x, y, rotation, points, color, ctx) {
      var p, _i, _len;
      this.ctx = ctx;
      this.x = x;
      this.y = y;
      this.dx = 0;
      this.dy = 0;
      this.maxX = MAXWIDTH;
      this.maxY = MAXHEIGHT;
      this.speed = 0;
      this.rotation = rotation;
      this.basePoints = points;
      this.points = (function() {
        var _i, _len, _ref, _results;
        _ref = this.basePoints;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push([p[0], p[1]]);
        }
        return _results;
      }).call(this);
      this.segments = [];
      this.color = color;
      this.radius2 = 0;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        this.radius2 = Math.max(this.radius2, p[0] * p[0] + p[1] + p[1]);
      }
    }

    Shape.prototype.draw = function() {
      var last, point, _i, _len, _ref;
      this.ctx.save();
      this.ctx.strokeStyle = this.color;
      this.ctx.beginPath();
      last = this.points[this.points.length - 1];
      this.ctx.moveTo(last[0], last[1]);
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        this.ctx.lineTo(point[0], point[1]);
      }
      this.ctx.closePath();
      return this.ctx.stroke();
    };

    Shape.prototype.segments = function() {
      return segments;
    };

    Shape.prototype.move = function() {
      var i, _results;
      i = 0;
      this.x += this.dx + this.maxX;
      this.y += this.dy + this.maxY;
      this.x %= this.maxX;
      this.y %= this.maxY;
      this.dx *= 0.9999;
      this.dy *= 0.9999;
      _results = [];
      while (i < this.basePoints.length) {
        this.points[i][0] = this.x + this.basePoints[i][0] * Math.cos(this.rotation) - this.basePoints[i][1] * Math.sin(this.rotation);
        this.points[i][1] = this.y + this.basePoints[i][0] * Math.sin(this.rotation) + this.basePoints[i][1] * Math.cos(this.rotation);
        _results.push(i += 1);
      }
      return _results;
    };

    Shape.prototype.accelerate = function(speed, angle) {
      this.dx += speed * Math.sin(this.rotation + angle);
      return this.dy -= speed * Math.cos(this.rotation + angle);
    };

    Shape.collideShapes = function(shapeA, shapeB) {
      var segmentA, segmentB, _i, _j, _len, _len1, _ref, _ref1;
      if (Shape.distance2(shapeA, shapeB) < shapeA.radius2 + shapeB.radius2) {
        return false;
      }
      _ref = shapeA.segments();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segmentA = _ref[_i];
        _ref1 = shapeB.segments();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          segmentB = _ref1[_j];
          if (Shape.collideSegments(segmentA, segmentB)) {
            return true;
          }
        }
      }
      return false;
    };

    Shape.distance2 = function(shapeA, shapeB) {
      var dx, dy;
      dx = shapeA.x - shapeB.x;
      dy = shapeA.y - shapeB.y;
      return dx * dx + dy * dy;
    };

    return Shape;

  })();

  SpaceShip = (function() {

    function SpaceShip(x, y, rotation, ctx) {
      var points;
      this.x = x;
      this.y = y;
      this.rotation = rotation;
      this.speed = 0;
      points = [[0, -15], [-10, 10], [10, 10]];
      this.shape = new Shape(this.x, this.y, this.rotation, points, 'lime', ctx);
    }

    SpaceShip.prototype.rotate = function(angle) {
      this.rotation += angle;
      return this.shape.rotation += angle;
    };

    SpaceShip.prototype.accelerate = function(speed) {
      return this.shape.accelerate(speed, 0);
    };

    SpaceShip.prototype.strafe = function(speed, angle) {
      return this.shape.accelerate(speed, angle);
    };

    SpaceShip.prototype.tick = function() {
      this.shape.move();
      return this.shape.draw();
    };

    return SpaceShip;

  })();

  Rock = (function() {

    function Rock(x, y, size, ctx) {
      var points;
      this.x = x;
      this.y = y;
      this.size = size;
      this.rotation = 0.1;
      this.angle = 0.1;
      this.speed = 1;
      points = [[-31, 1], [-21, -25], [15, -27], [31, 2], [-3, 29]];
      this.shape = new Shape(this.x, this.y, this.rotation, points, 'orange', ctx);
      this.shape.accelerate(this.speed, 0);
    }

    Rock.prototype.tick = function() {
      this.shape.rotation += this.angle;
      this.shape.move();
      return this.shape.draw();
    };

    return Rock;

  })();

  $("#asteroids_canvas").css("width", $(window).width() + "px");

  $("#asteroids_canvas").css("height", $(window).height() + "px");

  $(window).resize(function() {
    $("#asteroids_canvas").css("width", $(window).width() + "px");
    return $("#asteroids_canvas").css("height", $(window).height() + "px");
  });

  g = new Game();

  g.bindKeyboard('body');

  $.doTimeout('main_loop', 50, (function() {
    return g.update();
  }));

}).call(this);
